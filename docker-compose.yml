services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    ports:
      - "4000:4000"
    networks:
      - my-network

  api-gateway:
    build:
      context: .
      dockerfile: ./backend/apps/api-gateway/Dockerfile
      target: development
    command: npm run start:dev api-gateway
    env_file:
      - ./backend/apps/api-gateway/.env
    depends_on:
      - mongodb
      - task-service
      - auth-service
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    networks:
      - my-network

  task-service:
    build:
      context: .
      dockerfile: ./backend/apps/task-service/Dockerfile
      target: development
    command: npm run start:dev task-service
    env_file:
      - ./backend/apps/task-service/.env
    depends_on:
      - mongodb
      - rabbitmq
      - auth-service
      - redis
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "3002:3002"
    networks:
      - my-network

  auth-service:
    build:
      context: .
      dockerfile: ./backend/apps/auth/Dockerfile
      target: development
    command: npm run start:dev auth
    ports:
      - "3003:3003"
    env_file:
      - ./backend/apps/auth/.env
    depends_on:
      - mongodb
      - rabbitmq
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - my-network

  rabbitmq:
    image: rabbitmq
    ports:
      - "5672:5672"
    networks:
      - my-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - my-network

  mongodb:
    image: docker.io/bitnami/mongodb:5.0
    environment:
      - MONGODB_ROOT_PASSWORD=password123
    volumes:
      - "mongodb_data:/bitnami/mongodb"
    ports:
      - "27017:27017"
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
